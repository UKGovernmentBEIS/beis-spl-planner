name: Spl-planner-continuous-check

on:
  pull_request:
    types: [opened, synchronize, edited, reopened, ready_for_review, review_requested, auto_merge_enabled]
    branches:
      - 'master'
      - 'sonarless-scan-test' # <- Temporary, for testing

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.18.2]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run compile
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: compiled-files
        path: |
          dist/
          public/


  lint:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [18.18.2]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run lint


  unit_tests:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [18.18.2]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: compiled-files
    - run: npm test
    - uses: actions/upload-artifact@v2
      with:
        name: 'Coverage Reports'
        path: '${{ github.workspace }}/coverage/'


  accessibility_tests:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [18.18.2]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: compiled-files
    - name: Start server
      run: npm run test:start:a11y &
    - name: Wait for server to be ready
      run: |
        sleep 5
        echo "Server is ready"
    - run: npm run test:a11y
      env:
        CI: true
        

  feature_tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  Sonarless-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Solarless Scan
        uses: gitricko/sonarless@v1.2
        with:
          sonar-metrics-path: './sonar-metrics.json'

      - name: Check Sonar Metrics - No Vulnerabilities
        run: |
          echo "Checking for any vulnerabilities in Sonar Metrics JSON"
          VULN=$(cat ./sonar-metrics.json | jq -r '.component.measures[] | select(.metric == "vulnerabilities").value')
          echo "# of vulnerabilities = ${VULN}"
          [ ${VULN} -eq "0" ]

      - name: Check Sonar Metrics - Code Smells
        run: |
          echo "Checking for code smells in Sonar Metrics JSON"
          CODE_SMELLS=$(cat ./sonar-metrics.json | jq -r '.component.measures[] | select(.metric == "code_smells").value')
          echo "# of code smells = ${CODE_SMELLS}"
          [ ${CODE_SMELLS} -lt "10" ]

      - name: Check Sonar Metrics - Duplications
        run: |
          echo "Checking for duplications in Sonar Metrics JSON"
          DUPLICATIONS=$(cat ./sonar-metrics.json | jq -r '.component.measures[] | select(.metric == "duplicated_lines_density").value')
          echo "Duplicated lines density = ${DUPLICATIONS}"
          [ $(echo "${DUPLICATIONS} < 5.0" | bc) -eq 1 ]
